name: 'Terraform'

on:
  push:
    branches:
    - "main"
  pull_request:

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    
          
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{secrets.TF_API_TOKEN}}
        

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      env: 
        TF_VAR_aws_region: ${{secrets.AWS_REGION}}
        TF_VAR_bucket_name: ${{secrets.BUCKET_NAME}}
        TF_VAR_domain_name: ${{secrets.DOMAIN_NAME}}
        TF_VAR_profile: ${{secrets.AWS_PROFILE}}
        
      run: terraform plan -input=false
     

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      env: 
        TF_VAR_aws_region: ${{secrets.AWS_REGION}}
        TF_VAR_bucket_name: ${{secrets.BUCKET_NAME}}
        TF_VAR_domain_name: ${{secrets.DOMAIN_NAME}}
        TF_VAR_profile: ${{secrets.AWS_PROFILE}}
      run: terraform apply -auto-approve -input=false


      #Sync S3 Bucket
    -   name: S3 Sync
        uses: jakejarvis/s3-sync-action@v0.5.1
        with:
          args: --acl public-read --delete
        env:
          AWS_S3_BUCKET: ${{secrets.BUCKET_NAME}}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{secrets.AWS_REGION}}
          SOURCE_DIR: 'cloudresume'
      

      # Invalidate Cloufront
    -   name: Invalidate Cloudfront
        uses: chetan/invalidate-cloudfront-action@v1.3
        env:
          DISTRIBUTION: ${{secrets.DISTRIBUTION }}
          PATHS: '/*'
          AWS_REGION: ${{secrets.AWS_REGION}}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}